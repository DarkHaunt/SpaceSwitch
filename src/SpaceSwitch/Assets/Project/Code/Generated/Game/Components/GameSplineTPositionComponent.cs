//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSplineTPosition;

    public static Entitas.IMatcher<GameEntity> SplineTPosition {
        get {
            if (_matcherSplineTPosition == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SplineTPosition);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSplineTPosition = matcher;
            }

            return _matcherSplineTPosition;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Splines.SplineTPosition splineTPosition { get { return (Code.Gameplay.Features.Splines.SplineTPosition)GetComponent(GameComponentsLookup.SplineTPosition); } }
    public float SplineTPosition { get { return splineTPosition.Value; } }
    public bool hasSplineTPosition { get { return HasComponent(GameComponentsLookup.SplineTPosition); } }

    public GameEntity AddSplineTPosition(float newValue) {
        var index = GameComponentsLookup.SplineTPosition;
        var component = (Code.Gameplay.Features.Splines.SplineTPosition)CreateComponent(index, typeof(Code.Gameplay.Features.Splines.SplineTPosition));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSplineTPosition(float newValue) {
        var index = GameComponentsLookup.SplineTPosition;
        var component = (Code.Gameplay.Features.Splines.SplineTPosition)CreateComponent(index, typeof(Code.Gameplay.Features.Splines.SplineTPosition));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSplineTPosition() {
        RemoveComponent(GameComponentsLookup.SplineTPosition);
        return this;
    }
}
